pragma solidity >=0.5.0 <0.6.0;

contract AIFactory {

    event NewAI(uint AIId, string name, uint dna);
    
    uint dnaDigits = 16;
    uint dnaModulus = 10 ** dnaDigits;

    struct AI {
        uint dna;
        string name;
        }
    AI[] public AIs;
     mapping (uint => address) public AIToOwner;
     mapping (address => uint) ownerAICount;
    
    
    function _createAI(string memory _name, uint _dna) private {
        uint id = AIs.push(AI(_name, _dna)) -1;
        
        AIToOwner[id] = msg.sender;
        ownerAICount[msg.sender]++;

        
        emit NewAI(id, _name, _dna);
      
    function _generateRandomDna(string memory _str) private view returns (uint) {

          uint rand = uint(keccak256(abi.encodePacked(_str)));

          return rand % dnaModulus;
    }
    function createRandomAI(string memory _name) public {
        
        require(ownerAICount[msg.sender] == 0);
        
        uint randDna = _generateRandomDna(_name);
        
        _createAI(_name, randDna);
        
    }
}
********************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------------

import "./AIfactory.sol";

contract AIevolve is AIFactory {

}
